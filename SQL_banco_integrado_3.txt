-- MySQL Script generated by MySQL Workbench
-- Thu Nov  7 15:01:14 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Integrado
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Integrado
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Integrado` DEFAULT CHARACTER SET utf8 ;
USE `Integrado` ;

-- -----------------------------------------------------
-- Table `Integrado`.`disciplinas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`disciplinas` (
  `disciplina_id` INT NOT NULL AUTO_INCREMENT,
  `disciplina_nome` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`disciplina_id`),
  UNIQUE INDEX `disciplina_nome_UNIQUE` (`disciplina_nome` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`projetos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`projetos` (
  `projeto_id` INT NOT NULL AUTO_INCREMENT,
  `projeto_nome` VARCHAR(100) NOT NULL,
  `projeto_data_de_entrega` DATE NOT NULL,
  `projeto_descricao` LONGTEXT NOT NULL,
  `projeto_status` CHAR(1) NOT NULL DEFAULT 'A' COMMENT 'A = Ativo, P = Processado, C = Cancelado.',
  `projeto_semestre` VARCHAR(15) NOT NULL,
  `projeto_ano` YEAR(4) NOT NULL,
  PRIMARY KEY (`projeto_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`anexos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`anexos` (
  `anexo_id` INT NOT NULL AUTO_INCREMENT,
  `anexo_nome` VARCHAR(200) NOT NULL,
  `anexo_projeto_id` INT NOT NULL,
  PRIMARY KEY (`anexo_id`),
  INDEX `fk_anexos_projetos1_idx` (`anexo_projeto_id` ASC),
  CONSTRAINT `fk_anexos_projetos1`
    FOREIGN KEY (`anexo_projeto_id`)
    REFERENCES `Integrado`.`projetos` (`projeto_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`usuarios` (
  `usuario_id` INT NOT NULL AUTO_INCREMENT,
  `usuario_nome` VARCHAR(100) NOT NULL,
  `usuario_cpf` VARCHAR(20) NOT NULL,
  `usuario_email` VARCHAR(50) NOT NULL,
  `usuario_matricula` VARCHAR(20) NOT NULL,
  `usuario_senha` VARCHAR(8) NOT NULL,
  `usuario_nivel` VARCHAR(15) NOT NULL COMMENT 'Níveis disponíveis: Coordenador, Professsor, Aluno.',
  `usuario_status` CHAR(1) NOT NULL DEFAULT 'A' COMMENT 'A = Ativo, C = Cancelado.',
  PRIMARY KEY (`usuario_id`),
  UNIQUE INDEX `usuario_cpf_UNIQUE` (`usuario_cpf` ASC),
  UNIQUE INDEX `usuario_email_UNIQUE` (`usuario_email` ASC),
  UNIQUE INDEX `usuario_matricula_UNIQUE` (`usuario_matricula` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`integrantes_dos_projetos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`integrantes_dos_projetos` (
  `integrante_do_projeto_id` INT NOT NULL AUTO_INCREMENT,
  `integrante_do_projeto_projeto_id` INT NOT NULL,
  `integrante_do_projeto_usuario_id` INT NOT NULL,
  PRIMARY KEY (`integrante_do_projeto_id`),
  INDEX `fk_integrantes_e_disciplinas_dos_projetos_projetos1_idx` (`integrante_do_projeto_projeto_id` ASC),
  INDEX `fk_integrantes_dos_projetos_usuarios1_idx` (`integrante_do_projeto_usuario_id` ASC),
  CONSTRAINT `fk_integrantes_e_disciplinas_dos_projetos_projetos1`
    FOREIGN KEY (`integrante_do_projeto_projeto_id`)
    REFERENCES `Integrado`.`projetos` (`projeto_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_integrantes_dos_projetos_usuarios1`
    FOREIGN KEY (`integrante_do_projeto_usuario_id`)
    REFERENCES `Integrado`.`usuarios` (`usuario_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`disciplinas_dos_projetos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`disciplinas_dos_projetos` (
  `disciplina_do_projeto_id` INT NOT NULL AUTO_INCREMENT,
  `disciplina_do_projeto_projeto_id` INT NOT NULL,
  `disciplina_do_projeto_disciplina_id` INT NOT NULL,
  PRIMARY KEY (`disciplina_do_projeto_id`),
  INDEX `fk_disciplinas_dos_projetos_projetos1_idx` (`disciplina_do_projeto_projeto_id` ASC),
  INDEX `fk_disciplinas_dos_projetos_disciplinas1_idx` (`disciplina_do_projeto_disciplina_id` ASC),
  CONSTRAINT `fk_disciplinas_dos_projetos_projetos1`
    FOREIGN KEY (`disciplina_do_projeto_projeto_id`)
    REFERENCES `Integrado`.`projetos` (`projeto_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_disciplinas_dos_projetos_disciplinas1`
    FOREIGN KEY (`disciplina_do_projeto_disciplina_id`)
    REFERENCES `Integrado`.`disciplinas` (`disciplina_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`categorias_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`categorias_dos_eventos` (
  `categoria_id` INT NOT NULL AUTO_INCREMENT,
  `categoria_nome` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`categoria_id`),
  UNIQUE INDEX `categoria_nome_UNIQUE` (`categoria_nome` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`gestao_de_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`gestao_de_eventos` (
  `evento_id` INT NOT NULL AUTO_INCREMENT,
  `evento_nome` VARCHAR(50) NOT NULL,
  `evento_data_e_hora` DATETIME NOT NULL,
  `evento_local` VARCHAR(30) NOT NULL,
  `evento_curso` VARCHAR(50) NOT NULL,
  `evento_descricao` LONGTEXT NOT NULL,
  `evento_status` CHAR(1) NOT NULL DEFAULT 'A' COMMENT 'A = Ativo, P = Processado, C = Cancelado.',
  `evento_categoria_id` INT NOT NULL,
  PRIMARY KEY (`evento_id`),
  INDEX `fk_gestao_de_eventos_categorias_dos_eventos1_idx` (`evento_categoria_id` ASC),
  CONSTRAINT `fk_gestao_de_eventos_categorias_dos_eventos1`
    FOREIGN KEY (`evento_categoria_id`)
    REFERENCES `Integrado`.`categorias_dos_eventos` (`categoria_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`subcategorias_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`subcategorias_dos_eventos` (
  `subcategoria_id` INT NOT NULL AUTO_INCREMENT,
  `subcategoria_nome` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`subcategoria_id`),
  UNIQUE INDEX `subcategoria_nome_UNIQUE` (`subcategoria_nome` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`categorias_e_subcategorias_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`categorias_e_subcategorias_dos_eventos` (
  `cat_e_sub_id` INT NOT NULL AUTO_INCREMENT,
  `cat_e_sub_categoria_id` INT NOT NULL,
  `cat_e_sub_subcategoria_id` INT NOT NULL,
  PRIMARY KEY (`cat_e_sub_id`),
  INDEX `fk_categorias_e_subcategorias_dos_eventos_categorias_dos_ev_idx` (`cat_e_sub_categoria_id` ASC),
  INDEX `fk_categorias_e_subcategorias_dos_eventos_subcategorias_dos_idx` (`cat_e_sub_subcategoria_id` ASC),
  CONSTRAINT `fk_categorias_e_subcategorias_dos_eventos_categorias_dos_even1`
    FOREIGN KEY (`cat_e_sub_categoria_id`)
    REFERENCES `Integrado`.`categorias_dos_eventos` (`categoria_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_categorias_e_subcategorias_dos_eventos_subcategorias_dos_e1`
    FOREIGN KEY (`cat_e_sub_subcategoria_id`)
    REFERENCES `Integrado`.`subcategorias_dos_eventos` (`subcategoria_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`subcategorias_e_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`subcategorias_e_eventos` (
  `sub_e_evento_id` INT NOT NULL AUTO_INCREMENT,
  `sub_e_evento_evento_id` INT NOT NULL,
  `sub_e_evento_subcategoria_id` INT NOT NULL,
  PRIMARY KEY (`sub_e_evento_id`),
  INDEX `fk_subcategorias_e_eventos_gestao_de_eventos1_idx` (`sub_e_evento_evento_id` ASC),
  INDEX `fk_subcategorias_e_eventos_subcategorias_dos_eventos1_idx` (`sub_e_evento_subcategoria_id` ASC),
  CONSTRAINT `fk_subcategorias_e_eventos_gestao_de_eventos1`
    FOREIGN KEY (`sub_e_evento_evento_id`)
    REFERENCES `Integrado`.`gestao_de_eventos` (`evento_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_subcategorias_e_eventos_subcategorias_dos_eventos1`
    FOREIGN KEY (`sub_e_evento_subcategoria_id`)
    REFERENCES `Integrado`.`subcategorias_dos_eventos` (`subcategoria_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`fotos_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`fotos_dos_eventos` (
  `foto_do_evento_id` INT NOT NULL AUTO_INCREMENT,
  `foto_do_evento_nome` VARCHAR(30) NOT NULL,
  `foto_do_evento_evento_id` INT NOT NULL,
  PRIMARY KEY (`foto_do_evento_id`),
  INDEX `fk_fotos_dos_eventos_gestao_de_eventos1_idx` (`foto_do_evento_evento_id` ASC),
  CONSTRAINT `fk_fotos_dos_eventos_gestao_de_eventos1`
    FOREIGN KEY (`foto_do_evento_evento_id`)
    REFERENCES `Integrado`.`gestao_de_eventos` (`evento_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`atas_de_reunioes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`atas_de_reunioes` (
  `ata_id` INT NOT NULL AUTO_INCREMENT,
  `ata_nome` VARCHAR(50) NOT NULL,
  `ata_data_e_hora` DATETIME NOT NULL,
  `ata_pauta` MEDIUMTEXT NOT NULL,
  `ata_relatorio` LONGTEXT NOT NULL,
  `ata_status` CHAR(1) NOT NULL DEFAULT 'A' COMMENT 'A = Ativo, C = Cancelado.',
  PRIMARY KEY (`ata_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`participantes_das_reunioes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`participantes_das_reunioes` (
  `participante_id` INT NOT NULL AUTO_INCREMENT,
  `participante_ata_id` INT NOT NULL,
  `participante_usuario_id` INT NOT NULL,
  PRIMARY KEY (`participante_id`),
  INDEX `fk_participantes_da_reuniao_atas_de_reunioes1_idx` (`participante_ata_id` ASC),
  INDEX `fk_participantes_da_reuniao_usuarios1_idx` (`participante_usuario_id` ASC),
  CONSTRAINT `fk_participantes_da_reuniao_atas_de_reunioes1`
    FOREIGN KEY (`participante_ata_id`)
    REFERENCES `Integrado`.`atas_de_reunioes` (`ata_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participantes_da_reuniao_usuarios1`
    FOREIGN KEY (`participante_usuario_id`)
    REFERENCES `Integrado`.`usuarios` (`usuario_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_projetos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_projetos` (
  `id_bk_projeto` INT NOT NULL AUTO_INCREMENT,
  `bk_projeto_id` INT NOT NULL,
  `bk_projeto_nome` VARCHAR(100) NOT NULL,
  `bk_projeto_data_de_entrega` DATE NOT NULL,
  `bk_projeto_descricao` LONGTEXT NOT NULL,
  `bk_projeto_status` CHAR(1) NOT NULL,
  `bk_projeto_semestre` VARCHAR(15) NOT NULL,
  `bk_projeto_ano` YEAR(4) NOT NULL,
  `bk_projeto_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_projeto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_anexos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_anexos` (
  `id_bk_anexo` INT NOT NULL AUTO_INCREMENT,
  `bk_anexo_id` INT NOT NULL,
  `bk_anexo_nome` VARCHAR(200) NOT NULL,
  `bk_anexo_projeto_id` INT NOT NULL,
  `bk_anexo_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_anexo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_disciplinas_dos_projetos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_disciplinas_dos_projetos` (
  `id_bk_disciplina_do_projeto` INT NOT NULL AUTO_INCREMENT,
  `bk_disciplina_do_projeto_id` INT NOT NULL,
  `bk_disciplina_do_projeto_projeto_id` INT NOT NULL,
  `bk_disciplina_do_projeto_disciplina_id` INT NOT NULL,
  `bk_disciplina_do_projeto_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_disciplina_do_projeto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_disciplinas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_disciplinas` (
  `id_bk_disciplina` INT NOT NULL AUTO_INCREMENT,
  `bk_disciplina_id` INT NOT NULL,
  `bk_disciplina_nome` VARCHAR(100) NOT NULL,
  `bk_disciplina_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_disciplina`))
ENGINE = InnoDB
COMMENT = '		';


-- -----------------------------------------------------
-- Table `Integrado`.`bk_atas_de_reunioes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_atas_de_reunioes` (
  `id_bk_ata` INT NOT NULL AUTO_INCREMENT,
  `bk_ata_id` INT NOT NULL,
  `bk_ata_nome` VARCHAR(50) NOT NULL,
  `bk_ata_data_e_hora` DATETIME NOT NULL,
  `bk_ata_pauta` MEDIUMTEXT NOT NULL,
  `bk_ata_relatorio` LONGTEXT NOT NULL,
  `bk_ata_status` CHAR(1) NOT NULL,
  `bk_ata_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_ata`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_participantes_das_reunioes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_participantes_das_reunioes` (
  `id_bk_participante` INT NOT NULL AUTO_INCREMENT,
  `bk_participante_id` INT NOT NULL,
  `bk_participante_ata_id` INT NOT NULL,
  `bk_participante_usuario_id` INT NOT NULL,
  `bk_participante_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_participante`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_categorias_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_categorias_dos_eventos` (
  `id_bk_categoria` INT NOT NULL AUTO_INCREMENT,
  `bk_categoria_id` INT NOT NULL,
  `bk_categoria_nome` VARCHAR(30) NOT NULL,
  `bk_categoria_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_categoria`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_gestao_de_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_gestao_de_eventos` (
  `id_bk_evento` INT NOT NULL AUTO_INCREMENT,
  `bk_evento_id` INT NOT NULL,
  `bk_evento_nome` VARCHAR(50) NOT NULL,
  `bk_evento_data_e_hora` DATETIME NOT NULL,
  `bk_evento_local` VARCHAR(30) NOT NULL,
  `bk_evento_descricao` LONGTEXT NOT NULL,
  `bk_evento_curso` VARCHAR(50) NOT NULL,
  `bk_evento_status` CHAR(1) NOT NULL,
  `bk_evento_categoria_id` INT NOT NULL,
  `bk_evento_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_evento`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_categorias_e_subcategorias_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_categorias_e_subcategorias_dos_eventos` (
  `id_bk_cat_e_sub` INT NOT NULL AUTO_INCREMENT,
  `bk_cat_e_sub_id` INT NOT NULL,
  `bk_cat_e_sub_categoria_id` INT NOT NULL,
  `bk_cat_e_sub_subcategoria_id` INT NOT NULL,
  `bk_cat_e_sub_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_cat_e_sub`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_fotos_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_fotos_dos_eventos` (
  `id_bk_foto_do_evento` INT NOT NULL AUTO_INCREMENT,
  `bk_foto_do_evento_id` INT NOT NULL,
  `bk_foto_do_evento_nome` VARCHAR(30) NOT NULL,
  `bk_foto_do_evento_evento_id` INT NOT NULL,
  `bk_foto_do_evento_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_foto_do_evento`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_subcategorias_e_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_subcategorias_e_eventos` (
  `id_bk_sub_e_evento` INT NOT NULL AUTO_INCREMENT,
  `bk_sub_e_evento_id` INT NOT NULL,
  `bk_sub_e_evento_evento_id` INT NOT NULL,
  `bk_sub_e_evento_subcategoria_id` INT NOT NULL,
  `bk_sub_e_evento_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_sub_e_evento`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_subcategorias_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_subcategorias_dos_eventos` (
  `id_bk_subcategoria` INT NOT NULL AUTO_INCREMENT,
  `bk_subcategoria_id` INT NOT NULL,
  `bk_subcategoria_nome` VARCHAR(30) NOT NULL,
  `bk_subcategoria_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_subcategoria`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_usuarios` (
  `id_bk_usuario` INT NOT NULL AUTO_INCREMENT,
  `bk_usuario_id` INT NOT NULL,
  `bk_usuario_nome` VARCHAR(100) NOT NULL,
  `bk_usuario_cpf` VARCHAR(20) NOT NULL,
  `bk_usuario_email` VARCHAR(50) NOT NULL,
  `bk_usuario_matricula` VARCHAR(20) NOT NULL,
  `bk_usuario_senha` VARCHAR(8) NOT NULL,
  `bk_usuario_nivel` VARCHAR(15) NOT NULL,
  `bk_usuario_status` CHAR(1) NOT NULL,
  `bk_usuario_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_usuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_integrantes_dos_projetos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_integrantes_dos_projetos` (
  `id_bk_integrante_do_projeto` INT NOT NULL AUTO_INCREMENT,
  `bk_integrante_do_projeto_id` INT NOT NULL,
  `bk_integrante_do_projeto_projeto_id` INT NOT NULL,
  `bk_integrante_do_projeto_usuario_id` INT NOT NULL,
  `bk_integrante_do_projeto_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_integrante_do_projeto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`participantes_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`participantes_dos_eventos` (
  `participante_do_evento_id` INT NOT NULL AUTO_INCREMENT,
  `participante_do_evento_evento_id` INT NOT NULL,
  `participante_do_evento_usuario_id` INT NOT NULL,
  PRIMARY KEY (`participante_do_evento_id`),
  INDEX `fk_participantes_dos_eventos_gestao_de_eventos1_idx` (`participante_do_evento_evento_id` ASC),
  INDEX `fk_participantes_dos_eventos_usuarios1_idx` (`participante_do_evento_usuario_id` ASC),
  CONSTRAINT `fk_participantes_dos_eventos_gestao_de_eventos1`
    FOREIGN KEY (`participante_do_evento_evento_id`)
    REFERENCES `Integrado`.`gestao_de_eventos` (`evento_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participantes_dos_eventos_usuarios1`
    FOREIGN KEY (`participante_do_evento_usuario_id`)
    REFERENCES `Integrado`.`usuarios` (`usuario_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Integrado`.`bk_participantes_dos_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Integrado`.`bk_participantes_dos_eventos` (
  `id_bk_participante_do_evento` INT NOT NULL AUTO_INCREMENT,
  `bk_participante_do_evento_id` INT NOT NULL,
  `bk_participante_do_evento_evento_id` INT NOT NULL,
  `bk_participante_do_evento_usuario_id` INT NOT NULL,
  `bk_participante_do_evento_registro` DATETIME NOT NULL,
  PRIMARY KEY (`id_bk_participante_do_evento`))
ENGINE = InnoDB;

USE `Integrado`;

DELIMITER $$
USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`disciplinas_antes_update` 
BEFORE UPDATE ON `disciplinas` FOR EACH ROW
BEGIN
	INSERT INTO bk_disciplinas (
		bk_disciplina_id,
		bk_disciplina_nome,
		bk_disciplina_registro) 
	VALUES (
		OLD.disciplina_id,
		OLD.disciplina_nome,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`disciplinas_antes_delete` 
BEFORE DELETE ON `disciplinas` FOR EACH ROW
BEGIN
	INSERT INTO bk_disciplinas (
		bk_disciplina_id,
		bk_disciplina_nome,
		bk_disciplina_registro) 
	VALUES (
		OLD.disciplina_id,
		OLD.disciplina_nome,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`projetos_antes_update` 
BEFORE UPDATE ON `projetos` FOR EACH ROW
BEGIN
	INSERT INTO bk_projetos (
		bk_projeto_id,
		bk_projeto_nome,
		bk_projeto_data_de_entrega,
		bk_projeto_descricao,
		bk_projeto_status,
		bk_projeto_semestre,
		bk_projeto_ano,
		bk_projeto_registro) 
	VALUES (
		OLD.projeto_id,
		OLD.projeto_nome,
		OLD.projeto_data_de_entrega,
		OLD.projeto_descricao,
		OLD.projeto_status,
		OLD.projeto_semestre,
		OLD.projeto_ano,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`projetos_antes_delete` 
BEFORE DELETE ON `projetos` FOR EACH ROW
BEGIN
	INSERT INTO bk_projetos (
		bk_projeto_id,
		bk_projeto_nome,
		bk_projeto_data_de_entrega,
		bk_projeto_descricao,
		bk_projeto_status,
		bk_projeto_semestre,
		bk_projeto_ano,
		bk_projeto_registro) 
	VALUES (
		OLD.projeto_id,
		OLD.projeto_nome,
		OLD.projeto_data_de_entrega,
		OLD.projeto_descricao,
		OLD.projeto_status,
		OLD.projeto_semestre,
		OLD.projeto_ano,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`anexos_antes_update` 
BEFORE UPDATE ON `anexos` FOR EACH ROW
BEGIN
	INSERT INTO bk_anexos (
		bk_anexo_id,
		bk_anexo_nome,
		bk_anexo_projeto_id,
		bk_anexo_registro) 
	VALUES (
		OLD.anexo_id,
		OLD.anexo_nome,
		OLD.anexo_projeto_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`anexos_antes_delete` 
BEFORE DELETE ON `anexos` FOR EACH ROW
BEGIN
	INSERT INTO bk_anexos (
		bk_anexo_id,
		bk_anexo_nome,
		bk_anexo_projeto_id,
		bk_anexo_registro) 
	VALUES (
		OLD.anexo_id,
		OLD.anexo_nome,
		OLD.anexo_projeto_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`usuarios_antes_update` 
BEFORE UPDATE ON `usuarios` FOR EACH ROW
BEGIN
	INSERT INTO bk_usuarios (
		bk_usuario_id,
		bk_usuario_nome,
		bk_usuario_cpf,
		bk_usuario_email,
		bk_usuario_matricula,
		bk_usuario_senha,
		bk_usuario_nivel,
		bk_usuario_status,
		bk_usuario_registro) 
	VALUES (
		OLD.usuario_id,
		OLD.usuario_nome,
		OLD.usuario_cpf,
		OLD.usuario_email,
		OLD.usuario_matricula,
		OLD.usuario_senha,
		OLD.usuario_nivel,
		OLD.usuario_status,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`usuarios_antes_delete` 
BEFORE DELETE ON `usuarios` FOR EACH ROW
BEGIN
	INSERT INTO bk_usuarios (
		bk_usuario_id,
		bk_usuario_nome,
		bk_usuario_cpf,
		bk_usuario_email,
		bk_usuario_matricula,
		bk_usuario_senha,
		bk_usuario_nivel,
		bk_usuario_status,
		bk_usuario_registro) 
	VALUES (
		OLD.usuario_id,
		OLD.usuario_nome,
		OLD.usuario_cpf,
		OLD.usuario_email,
		OLD.usuario_matricula,
		OLD.usuario_senha,
		OLD.usuario_nivel,
		OLD.usuario_status,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`integrantes_dos_projetos_antes_update` 
BEFORE UPDATE ON `integrantes_dos_projetos` FOR EACH ROW
BEGIN
	INSERT INTO bk_integrantes_dos_projetos (
		bk_integrante_do_projeto_id,
		bk_integrante_do_projeto_projeto_id,
		bk_integrante_do_projeto_usuario_id,
		bk_integrante_do_projeto_registro) 
	VALUES (
		OLD.integrante_do_projeto_id,
		OLD.integrante_do_projeto_projeto_id,
		OLD.integrante_do_projeto_usuario_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`integrantes_dos_projetos_antes_delete` 
BEFORE DELETE ON `integrantes_dos_projetos` FOR EACH ROW
BEGIN
	INSERT INTO bk_integrantes_dos_projetos (
		bk_integrante_do_projeto_id,
		bk_integrante_do_projeto_projeto_id,
		bk_integrante_do_projeto_usuario_id,
		bk_integrante_do_projeto_registro) 
	VALUES (
		OLD.integrante_do_projeto_id,
		OLD.integrante_do_projeto_projeto_id,
		OLD.integrante_do_projeto_usuario_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`disciplinas_dos_projetos_antes_update` 
BEFORE UPDATE ON `disciplinas_dos_projetos` FOR EACH ROW
BEGIN
	INSERT INTO bk_disciplinas_dos_projetos (
		bk_disciplina_do_projeto_id,
		bk_disciplina_do_projeto_projeto_id,
		bk_disciplina_do_projeto_disciplina_id,
		bk_disciplina_do_projeto_registro) 
	VALUES (
		OLD.disciplina_do_projeto_id,
		OLD.disciplina_do_projeto_projeto_id,
		OLD.disciplina_do_projeto_disciplina_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`disciplinas_dos_projetos_antes_delete` 
BEFORE DELETE ON `disciplinas_dos_projetos` FOR EACH ROW
BEGIN
	INSERT INTO bk_disciplinas_dos_projetos (
		bk_disciplina_do_projeto_id,
		bk_disciplina_do_projeto_projeto_id,
		bk_disciplina_do_projeto_disciplina_id,
		bk_disciplina_do_projeto_registro) 
	VALUES (
		OLD.disciplina_do_projeto_id,
		OLD.disciplina_do_projeto_projeto_id,
		OLD.disciplina_do_projeto_disciplina_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`categorias_dos_eventos_antes_update` 
BEFORE UPDATE ON `categorias_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_categorias_dos_eventos (
		bk_categoria_id,
		bk_categoria_nome,
		bk_categoria_registro) 
	VALUES (
		OLD.categoria_id,
		OLD.categoria_nome,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`categorias_dos_eventos_antes_delete` 
BEFORE DELETE ON `categorias_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_categorias_dos_eventos (
		bk_categoria_id,
		bk_categoria_nome,
		bk_categoria_registro) 
	VALUES (
		OLD.categoria_id,
		OLD.categoria_nome,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`gestao_de_eventos_antes_update` 
BEFORE UPDATE ON `gestao_de_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_gestao_de_eventos (
		bk_evento_id,
		bk_evento_nome,
		bk_evento_data_e_hora,
		bk_evento_local,
		bk_evento_descricao,
        bk_evento_curso,
		bk_evento_status,
		bk_evento_categoria_id,
		bk_evento_registro) 
	VALUES (
		OLD.evento_id,
		OLD.evento_nome,
		OLD.evento_data_e_hora,
		OLD.evento_local,
		OLD.evento_descricao,
        OLD.evento_curso,
		OLD.evento_status,
		OLD.evento_categoria_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`gestao_de_eventos_antes_delete` 
BEFORE DELETE ON `gestao_de_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_gestao_de_eventos (
		bk_evento_id,
		bk_evento_nome,
		bk_evento_data_e_hora,
		bk_evento_local,
		bk_evento_descricao,
        bk_evento_curso,
		bk_evento_status,
		bk_evento_categoria_id,
		bk_evento_registro) 
	VALUES (
		OLD.evento_id,
		OLD.evento_nome,
		OLD.evento_data_e_hora,
		OLD.evento_local,
		OLD.evento_descricao,
        OLD.evento_curso,
		OLD.evento_status,
		OLD.evento_categoria_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`subcategorias_dos_eventos_antes_update` 
BEFORE UPDATE ON `subcategorias_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_subcategorias_dos_eventos (
		bk_subcategoria_id,
		bk_subcategoria_nome,
		bk_subcategoria_registro) 
	VALUES (
		OLD.subcategoria_id,
		OLD.subcategoria_nome,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`subcategorias_dos_eventos_antes_delete` 
BEFORE DELETE ON `subcategorias_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_subcategorias_dos_eventos (
		bk_subcategoria_id,
		bk_subcategoria_nome,
		bk_subcategoria_registro) 
	VALUES (
		OLD.subcategoria_id,
		OLD.subcategoria_nome,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`categorias_e_subcategorias_dos_eventos_antes_update` 
BEFORE UPDATE ON `categorias_e_subcategorias_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_categorias_e_subcategorias_dos_eventos (
		bk_cat_e_sub_id,
		bk_cat_e_sub_categoria_id,
		bk_cat_e_sub_subcategoria_id,
		bk_cat_e_sub_registro) 
	VALUES (
		OLD.cat_e_sub_id,
		OLD.cat_e_sub_categoria_id,
		OLD.cat_e_sub_subcategoria_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`categorias_e_subcategorias_dos_eventos_antes_delete` 
BEFORE DELETE ON `categorias_e_subcategorias_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_categorias_e_subcategorias_dos_eventos (
		bk_cat_e_sub_id,
		bk_cat_e_sub_categoria_id,
		bk_cat_e_sub_subcategoria_id,
		bk_cat_e_sub_registro) 
	VALUES (
		OLD.cat_e_sub_id,
		OLD.cat_e_sub_categoria_id,
		OLD.cat_e_sub_subcategoria_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`subcategorias_e_eventos_antes_update` 
BEFORE UPDATE ON `subcategorias_e_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_subcategorias_e_eventos (
		bk_sub_e_evento_id,
		bk_sub_e_evento_evento_id,
		bk_sub_e_evento_subcategoria_id,
		bk_sub_e_evento_registro) 
	VALUES (
		OLD.sub_e_evento_id,
		OLD.sub_e_evento_evento_id,
		OLD.sub_e_evento_subcategoria_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`subcategorias_e_eventos_antes_delete` 
BEFORE DELETE ON `subcategorias_e_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_subcategorias_e_eventos (
		bk_sub_e_evento_id,
		bk_sub_e_evento_evento_id,
		bk_sub_e_evento_subcategoria_id,
		bk_sub_e_evento_registro) 
	VALUES (
		OLD.sub_e_evento_id,
		OLD.sub_e_evento_evento_id,
		OLD.sub_e_evento_subcategoria_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`fotos_dos_eventos_antes_update` 
BEFORE UPDATE ON `fotos_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_fotos_dos_eventos (
		bk_foto_do_evento_id,
		bk_foto_do_evento_nome,
		bk_foto_do_evento_evento_id,
		bk_foto_do_evento_registro) 
	VALUES (
		OLD.foto_do_evento_id,
		OLD.foto_do_evento_nome,
		OLD.foto_do_evento_evento_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`fotos_dos_eventos_antes_delete` 
BEFORE DELETE ON `fotos_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_fotos_dos_eventos (
		bk_foto_do_evento_id,
		bk_foto_do_evento_nome,
		bk_foto_do_evento_evento_id,
		bk_foto_do_evento_registro) 
	VALUES (
		OLD.foto_do_evento_id,
		OLD.foto_do_evento_nome,
		OLD.foto_do_evento_evento_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`atas_de_reunioes_antes_update` 
BEFORE UPDATE ON `atas_de_reunioes` FOR EACH ROW
BEGIN
	INSERT INTO bk_atas_de_reunioes (
		bk_ata_id,
		bk_ata_nome,
		bk_ata_data_e_hora,
		bk_ata_pauta,
		bk_ata_relatorio,
		bk_ata_status,
		bk_ata_registro) 
	VALUES (
		OLD.ata_id,
		OLD.ata_nome,
		OLD.ata_data_e_hora,
		OLD.ata_pauta,
		OLD.ata_relatorio,
		OLD.ata_status,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`atas_de_reunioes_antes_delete` 
BEFORE DELETE ON `atas_de_reunioes` FOR EACH ROW
BEGIN
	INSERT INTO bk_atas_de_reunioes (
		bk_ata_id,
		bk_ata_nome,
		bk_ata_data_e_hora,
		bk_ata_pauta,
		bk_ata_relatorio,
		bk_ata_status,
		bk_ata_registro) 
	VALUES (
		OLD.ata_id,
		OLD.ata_nome,
		OLD.ata_data_e_hora,
		OLD.ata_pauta,
		OLD.ata_relatorio,
		OLD.ata_status,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`participantes_das_reunioes_antes_update` 
BEFORE UPDATE ON `participantes_das_reunioes` FOR EACH ROW
BEGIN
	INSERT INTO bk_participantes_das_reunioes (
		bk_participante_id,
		bk_participante_ata_id,
		bk_participante_usuario_id,
		bk_participante_registro) 
	VALUES (
		OLD.participante_id,
		OLD.participante_ata_id,
		OLD.participante_usuario_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`participantes_das_reunioes_antes_delete` 
BEFORE DELETE ON `participantes_das_reunioes` FOR EACH ROW
BEGIN
	INSERT INTO bk_participantes_das_reunioes (
		bk_participante_id,
		bk_participante_ata_id,
		bk_participante_usuario_id,
		bk_participante_registro) 
	VALUES (
		OLD.participante_id,
		OLD.participante_ata_id,
		OLD.participante_usuario_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`participantes_dos_eventos_antes_update`
BEFORE UPDATE ON `participantes_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_participantes_dos_eventos (
		id_bk_participante_do_evento,
        bk_participante_do_evento_id,
        bk_participante_do_evento_evento_id,
        bk_participante_do_evento_usuario_id,
        bk_participante_do_evento_registro) 
	VALUES (
		OLD.participante_do_evento_id,
		OLD.participante_do_evento_evento_id,
		OLD.participante_do_evento_usuario_id,
		now());
END$$

USE `Integrado`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Integrado`.`participantes_dos_eventos_antes_delete`
BEFORE DELETE ON `participantes_dos_eventos` FOR EACH ROW
BEGIN
	INSERT INTO bk_participantes_dos_eventos (
		id_bk_participante_do_evento,
        bk_participante_do_evento_id,
        bk_participante_do_evento_evento_id,
        bk_participante_do_evento_usuario_id,
        bk_participante_do_evento_registro) 
	VALUES (
		OLD.participante_do_evento_id,
		OLD.participante_do_evento_evento_id,
		OLD.participante_do_evento_usuario_id,
		now());
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `Integrado`.`disciplinas`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`disciplinas` (`disciplina_id`, `disciplina_nome`) VALUES (1, 'Técnicas de Programação');
INSERT INTO `Integrado`.`disciplinas` (`disciplina_id`, `disciplina_nome`) VALUES (2, 'Banco de dados');
INSERT INTO `Integrado`.`disciplinas` (`disciplina_id`, `disciplina_nome`) VALUES (3, 'Engenharia de Software');

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`projetos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`projetos` (`projeto_id`, `projeto_nome`, `projeto_data_de_entrega`, `projeto_descricao`, `projeto_status`, `projeto_semestre`, `projeto_ano`) VALUES (1, 'Spyware', '2019-05-03', 'Este projeto tem como objetivo.', 'P', '1º Semestre', 2019);
INSERT INTO `Integrado`.`projetos` (`projeto_id`, `projeto_nome`, `projeto_data_de_entrega`, `projeto_descricao`, `projeto_status`, `projeto_semestre`, `projeto_ano`) VALUES (2, 'Vírus', '2019-05-03', 'Este projeto tem como objetivo.', 'A', '2º Semestre', 2019);
INSERT INTO `Integrado`.`projetos` (`projeto_id`, `projeto_nome`, `projeto_data_de_entrega`, `projeto_descricao`, `projeto_status`, `projeto_semestre`, `projeto_ano`) VALUES (3, 'CMS', '2019-05-03', 'Este projeto tem como objetivo.', 'C', '4º Semestre', 2019);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`anexos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`anexos` (`anexo_id`, `anexo_nome`, `anexo_projeto_id`) VALUES (1, '1.jpg', 1);
INSERT INTO `Integrado`.`anexos` (`anexo_id`, `anexo_nome`, `anexo_projeto_id`) VALUES (2, '2.jpg', 2);
INSERT INTO `Integrado`.`anexos` (`anexo_id`, `anexo_nome`, `anexo_projeto_id`) VALUES (3, '3.jpg', 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`usuarios`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`usuarios` (`usuario_id`, `usuario_nome`, `usuario_cpf`, `usuario_email`, `usuario_matricula`, `usuario_senha`, `usuario_nivel`, `usuario_status`) VALUES (1, 'Joaquim Marcelo', '245.433.113-61', 'jo@gmail.com', '13312401', 'Senha789', 'Coordenador', 'A');
INSERT INTO `Integrado`.`usuarios` (`usuario_id`, `usuario_nome`, `usuario_cpf`, `usuario_email`, `usuario_matricula`, `usuario_senha`, `usuario_nivel`, `usuario_status`) VALUES (2, 'Tiago Francisco', '061.500.485-78', 'ti@gmail.com', '13469574', 'Senha123', 'Professor', 'C');
INSERT INTO `Integrado`.`usuarios` (`usuario_id`, `usuario_nome`, `usuario_cpf`, `usuario_email`, `usuario_matricula`, `usuario_senha`, `usuario_nivel`, `usuario_status`) VALUES (3, 'Severino Osvaldo', '663.947.476-02', 'se@gmail.com', '13251160', 'Senha456', 'Aluno', 'A');
INSERT INTO `Integrado`.`usuarios` (`usuario_id`, `usuario_nome`, `usuario_cpf`, `usuario_email`, `usuario_matricula`, `usuario_senha`, `usuario_nivel`, `usuario_status`) VALUES (4, 'Mateus Joaquim', '438.681.569-41', 'ma@gmail.com', '16901093', 'Senha321', 'Professor', 'A');

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`integrantes_dos_projetos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`integrantes_dos_projetos` (`integrante_do_projeto_id`, `integrante_do_projeto_projeto_id`, `integrante_do_projeto_usuario_id`) VALUES (1, 1, 1);
INSERT INTO `Integrado`.`integrantes_dos_projetos` (`integrante_do_projeto_id`, `integrante_do_projeto_projeto_id`, `integrante_do_projeto_usuario_id`) VALUES (2, 2, 2);
INSERT INTO `Integrado`.`integrantes_dos_projetos` (`integrante_do_projeto_id`, `integrante_do_projeto_projeto_id`, `integrante_do_projeto_usuario_id`) VALUES (3, 3, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`disciplinas_dos_projetos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`disciplinas_dos_projetos` (`disciplina_do_projeto_id`, `disciplina_do_projeto_projeto_id`, `disciplina_do_projeto_disciplina_id`) VALUES (1, 1, 1);
INSERT INTO `Integrado`.`disciplinas_dos_projetos` (`disciplina_do_projeto_id`, `disciplina_do_projeto_projeto_id`, `disciplina_do_projeto_disciplina_id`) VALUES (2, 2, 2);
INSERT INTO `Integrado`.`disciplinas_dos_projetos` (`disciplina_do_projeto_id`, `disciplina_do_projeto_projeto_id`, `disciplina_do_projeto_disciplina_id`) VALUES (3, 3, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`categorias_dos_eventos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`categorias_dos_eventos` (`categoria_id`, `categoria_nome`) VALUES (1, 'Projeto Integrado');
INSERT INTO `Integrado`.`categorias_dos_eventos` (`categoria_id`, `categoria_nome`) VALUES (2, 'Semana Institucional');
INSERT INTO `Integrado`.`categorias_dos_eventos` (`categoria_id`, `categoria_nome`) VALUES (3, 'Curso de Extenção');
INSERT INTO `Integrado`.`categorias_dos_eventos` (`categoria_id`, `categoria_nome`) VALUES (4, 'Visita Técnica');
INSERT INTO `Integrado`.`categorias_dos_eventos` (`categoria_id`, `categoria_nome`) VALUES (5, 'Colação de Grau');

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`gestao_de_eventos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`gestao_de_eventos` (`evento_id`, `evento_nome`, `evento_data_e_hora`, `evento_local`, `evento_curso`, `evento_descricao`, `evento_status`, `evento_categoria_id`) VALUES (1, 'Integrado', '2019-05-27 19:00:00', 'Módulo', 'Administração', 'Projeto Integrado', 'P', 1);
INSERT INTO `Integrado`.`gestao_de_eventos` (`evento_id`, `evento_nome`, `evento_data_e_hora`, `evento_local`, `evento_curso`, `evento_descricao`, `evento_status`, `evento_categoria_id`) VALUES (2, 'Palestra', '2019-11-13 19:00:00', 'Módulo', 'ADS', 'Palestra de ADS', 'A', 2);
INSERT INTO `Integrado`.`gestao_de_eventos` (`evento_id`, `evento_nome`, `evento_data_e_hora`, `evento_local`, `evento_curso`, `evento_descricao`, `evento_status`, `evento_categoria_id`) VALUES (3, 'Curso', '2019-09-07 19:00:00', 'Módulo', 'Direito', 'Curso Banco de dados', 'C', 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`subcategorias_dos_eventos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`subcategorias_dos_eventos` (`subcategoria_id`, `subcategoria_nome`) VALUES (1, 'ADS');
INSERT INTO `Integrado`.`subcategorias_dos_eventos` (`subcategoria_id`, `subcategoria_nome`) VALUES (2, 'Palestra');
INSERT INTO `Integrado`.`subcategorias_dos_eventos` (`subcategoria_id`, `subcategoria_nome`) VALUES (3, 'Banco de dados');
INSERT INTO `Integrado`.`subcategorias_dos_eventos` (`subcategoria_id`, `subcategoria_nome`) VALUES (4, 'Exposição');
INSERT INTO `Integrado`.`subcategorias_dos_eventos` (`subcategoria_id`, `subcategoria_nome`) VALUES (5, 'FEPRO – Feira de Profissões');

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`categorias_e_subcategorias_dos_eventos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`categorias_e_subcategorias_dos_eventos` (`cat_e_sub_id`, `cat_e_sub_categoria_id`, `cat_e_sub_subcategoria_id`) VALUES (1, 1, 1);
INSERT INTO `Integrado`.`categorias_e_subcategorias_dos_eventos` (`cat_e_sub_id`, `cat_e_sub_categoria_id`, `cat_e_sub_subcategoria_id`) VALUES (2, 2, 2);
INSERT INTO `Integrado`.`categorias_e_subcategorias_dos_eventos` (`cat_e_sub_id`, `cat_e_sub_categoria_id`, `cat_e_sub_subcategoria_id`) VALUES (3, 3, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`subcategorias_e_eventos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`subcategorias_e_eventos` (`sub_e_evento_id`, `sub_e_evento_evento_id`, `sub_e_evento_subcategoria_id`) VALUES (1, 1, 1);
INSERT INTO `Integrado`.`subcategorias_e_eventos` (`sub_e_evento_id`, `sub_e_evento_evento_id`, `sub_e_evento_subcategoria_id`) VALUES (2, 2, 2);
INSERT INTO `Integrado`.`subcategorias_e_eventos` (`sub_e_evento_id`, `sub_e_evento_evento_id`, `sub_e_evento_subcategoria_id`) VALUES (3, 3, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`fotos_dos_eventos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`fotos_dos_eventos` (`foto_do_evento_id`, `foto_do_evento_nome`, `foto_do_evento_evento_id`) VALUES (1, 'F1.jpg', 1);
INSERT INTO `Integrado`.`fotos_dos_eventos` (`foto_do_evento_id`, `foto_do_evento_nome`, `foto_do_evento_evento_id`) VALUES (2, 'F2.jpg', 2);
INSERT INTO `Integrado`.`fotos_dos_eventos` (`foto_do_evento_id`, `foto_do_evento_nome`, `foto_do_evento_evento_id`) VALUES (3, 'F3.jpg', 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`atas_de_reunioes`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`atas_de_reunioes` (`ata_id`, `ata_nome`, `ata_data_e_hora`, `ata_pauta`, `ata_relatorio`, `ata_status`) VALUES (1, 'Integrado', '2019-02-13 19:00:00', 'Falar sobre...', 'Foi discutido...', 'C');
INSERT INTO `Integrado`.`atas_de_reunioes` (`ata_id`, `ata_nome`, `ata_data_e_hora`, `ata_pauta`, `ata_relatorio`, `ata_status`) VALUES (2, 'Palestra', '2019-08-02 19:00:00', 'Falar sobre...', 'Foi discutido...', 'A');
INSERT INTO `Integrado`.`atas_de_reunioes` (`ata_id`, `ata_nome`, `ata_data_e_hora`, `ata_pauta`, `ata_relatorio`, `ata_status`) VALUES (3, 'Curso', '2019-08-09 19:00:00', 'Falar sobre...', 'Foi discutido...', 'C');

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`participantes_das_reunioes`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`participantes_das_reunioes` (`participante_id`, `participante_ata_id`, `participante_usuario_id`) VALUES (1, 1, 1);
INSERT INTO `Integrado`.`participantes_das_reunioes` (`participante_id`, `participante_ata_id`, `participante_usuario_id`) VALUES (2, 2, 2);
INSERT INTO `Integrado`.`participantes_das_reunioes` (`participante_id`, `participante_ata_id`, `participante_usuario_id`) VALUES (3, 3, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Integrado`.`participantes_dos_eventos`
-- -----------------------------------------------------
START TRANSACTION;
USE `Integrado`;
INSERT INTO `Integrado`.`participantes_dos_eventos` (`participante_do_evento_id`, `participante_do_evento_evento_id`, `participante_do_evento_usuario_id`) VALUES (1, 1, 1);
INSERT INTO `Integrado`.`participantes_dos_eventos` (`participante_do_evento_id`, `participante_do_evento_evento_id`, `participante_do_evento_usuario_id`) VALUES (2, 2, 2);
INSERT INTO `Integrado`.`participantes_dos_eventos` (`participante_do_evento_id`, `participante_do_evento_evento_id`, `participante_do_evento_usuario_id`) VALUES (3, 3, 3);

COMMIT;

